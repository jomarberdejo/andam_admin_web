// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Agency {
  NONE
  PNP
  BFP
  LGU
  MDRRMO
}

// enum Role {
//   SUPER_ADMIN
//   ADMIN
// }

model User {
  id        String   @id @default(uuid())
  name      String?
  username  String   @unique
  email     String?  @unique
  password  String
  agency    Agency   @default(NONE)
  createdAt DateTime @default(now())
  Login     Entry[]
}

// model User {
//   id        String    @id @default(uuid())
//   name      String?
//   username  String    @unique @db.VarChar(255) @map(name: "username", dbtype: "varchar(255) COLLATE utf8_bin")
//   email     String?   @unique
//   password  String    @db.VarChar(255) @map(name: "password", dbtype: "varchar(255) COLLATE utf8_bin")
//   agency    Agency    @default(MDRRMO)
//   createdAt DateTime  
// }

model Report {
  id         String  @id @default(uuid())
  name       String
  detail     String  @db.LongText
  contact    String
  latitude   Float
  longitude  Float
  location   String
  agency     Agency  @default(MDRRMO)
  isNew      Boolean @default(true)
  reportedAt String
}

model Contact {
  id     String  @id @default(uuid())
  number String? @unique
  agency Agency
}

model Entry {
  id     String  @id @default(uuid())
  date   String
  agency Agency?
  User   User    @relation(fields: [userId], references: [id])
  userId String
}

// model AgencyNumber {
//   id String @id @default(uuid())
//   agency Agency
//   phoneNumber String
// }

// model Author {
//   id    String @id @default(uuid())
//   name  String
//   books Book[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Book {
//   id String @id @default(uuid())
//   title String
//   Author   Author? @relation(fields: [authorId], references: [id])
//   authorId String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
